apiVersion: v1
kind: ConfigMap
metadata:
  name: api-server-config
  namespace: api-server
  labels:
    app: api-server
    component: config
data:
  # Database Configuration
  POSTGRES_DB: "api_server"
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # Application Configuration
  ENVIRONMENT: "production"
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  
  # JWT Configuration
  JWT_ISSUER: "api-server-k8s"
  JWT_EXPIRATION_TIME: "24h"
  JWT_REFRESH_TIME: "168h"
  JWT_ALGORITHM: "HS256"
  
  # Rate Limiting Configuration
  RATE_LIMIT_REQUESTS_PER_SECOND: "10"
  RATE_LIMIT_BURST_SIZE: "20"
  RATE_LIMIT_CLEANUP_INTERVAL: "5m"
  
  # CORS Configuration
  CORS_ALLOW_ORIGINS: "*"
  CORS_ALLOW_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_ALLOW_HEADERS: "Origin,Content-Length,Content-Type,Authorization"
  CORS_EXPOSE_HEADERS: "X-Request-ID"
  CORS_MAX_AGE: "12h"
  
  # Server Configuration
  SERVER_HOST: "0.0.0.0"
  SERVER_READ_TIMEOUT: "30s"
  SERVER_WRITE_TIMEOUT: "30s"
  SERVER_IDLE_TIMEOUT: "60s"
  SERVER_SHUTDOWN_TIMEOUT: "10s"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: api-server
  labels:
    app: api-server
    component: gateway
data:
  nginx.conf: |
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Security
        server_tokens off;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_min_length 10240;
        gzip_proxied expired no-cache no-store private must-revalidate auth;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Rate Limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_status 429;
        
        # Upstream Services
        upstream user-service {
            server user-service:8082 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        server {
            listen 80;
            server_name _;
            
            # Security headers
            add_header X-Request-ID $request_id always;
            
            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # API routes
            location /api/v1/users {
                limit_req zone=api burst=20 nodelay;
                
                proxy_pass http://user-service;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Request-ID $request_id;
                proxy_cache_bypass $http_upgrade;
                
                # Timeouts
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # Default location
            location / {
                return 404 '{"error": "Not Found", "message": "The requested resource was not found"}';
                add_header Content-Type application/json;
            }
        }
    }