version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: api-server-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: api_server
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration:/docker-entrypoint-initdb.d/
    networks:
      - api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d api_server"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis (for caching and sessions if needed)
  redis:
    image: redis:7-alpine
    container_name: api-server-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: redis-server --appendonly yes --requirepass redis_password

  # API Server
  api-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Server configuration
      APP_SERVER_HOST: 0.0.0.0
      APP_SERVER_PORT: 8080
      APP_SERVER_MODE: release
      
      # Database configuration
      APP_DATABASE_HOST: postgres
      APP_DATABASE_PORT: 5432
      APP_DATABASE_NAME: api_server
      APP_DATABASE_USER: postgres
      APP_DATABASE_PASSWORD: postgres
      APP_DATABASE_SSL_MODE: disable
      
      # JWT configuration
      APP_JWT_SECRET: your-super-secret-jwt-key-change-in-production
      APP_JWT_EXPIRY: 24h
      
      # Logger configuration
      APP_LOGGER_LEVEL: info
      APP_LOGGER_FORMAT: json
      APP_LOGGER_DISABLE_GIN: true
      
      # CORS configuration
      APP_CORS_ALLOWED_ORIGINS: "*"
      APP_CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
      APP_CORS_ALLOWED_HEADERS: "Content-Type,Authorization"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: api-server-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-server
    networks:
      - api-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  api-network:
    driver: bridge